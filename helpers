#!/bin/bash

unset GUI
if [[ "$(uname -s 2>/dev/null)" == Darwin ]]; then
  OS=macos
  GUI=1
elif [[ "$(lsb_release -i -s 2>/dev/null)" == Ubuntu ]]; then
  OS=ubuntu
  if dpkg -l ubuntu-desktop &>/dev/null; then GUI=1; fi
elif [[ "$(lsb_release -i -s 2>/dev/null)" == Debian ]]; then
  OS=debian
  # TODO detect GUI support in debian here
elif [[ "$(lsb_release -i -s 2>/dev/null)" == VoidLinux ]]; then
  OS=void
  # TODO detect GUI support in void here
elif [[ -e /etc/alpine-release ]]; then
  OS=alpine
  # TODO detect GUI support in alpine here
else
  OS=unknown
fi

# Install dependencies based on file system
function install_deps {
  # For macOS, just use Homebrew
  if [[ "$OS" == macos ]]; then
    if [[ -f Brewfile ]]; then
      echo '--- Installing dependencies via Homebrew'
      brew bundle
    fi
    return
  fi

  # Read dependencies
  local deps
  case "$OS" in
    alpine)
      if [[ ! -f Alpine ]]; then return; fi
      mapfile -t deps < Alpine
      ;;
    debian)
      if [[ ! -f Debian ]]; then return; fi
      mapfile -t deps < Debian
      ;;
    ubuntu)
      if [[ ! -f Ubuntu ]]; then return; fi
      mapfile -t deps < Ubuntu
      ;;
    void)
      if [[ ! -f Void ]]; then return; fi
      mapfile -t deps < Void
      ;;
    *)
      echo "!!! Unsupported OS to install dependencies: $OS"
      return 1
      ;;
  esac

  # Filter dependencies based on criteria
  local exclude
  local cleanup
  if [[ -n "$GUI" ]]; then
    exclude=NOGUI
    cleanup=GUI
  else
    exclude=GUI
    cleanup=NOGUI
  fi
  deps=${deps[*]//*\($exclude\)/}
  deps=${deps//\($cleanup\)/}

  # Execute
  case $OS in
    alpine)
      # TODO check if packages are already installed
      echo '--- Installing dependencies via apk'
      sudo apk add $deps
      ;;
    debian | ubuntu)
      if ! dpkg-query -s $deps &>/dev/null; then
        echo '--- Installing dependencies via apt'
        sudo apt -y install $deps
      fi
      ;;
    void)
      # TODO check if packages are already installed
      echo '--- Installing dependencies via xbps'
      sudo xbps-install -Sy $deps
      ;;
  esac
  if [[ $? -ne 0 ]]; then
    echo '!!! Failed to install dependencies'
    exit 1
  fi
}

# Remove functions used only for installation
function cleanup_helpers {
  unset -f cleanup_helpers
  unset -f install_deps
}
